---
import type { CollectionEntry } from 'astro:content';

const { posts = [] } = Astro.props as { posts: CollectionEntry<'posts'>[] };

const makeSearchText = (post: CollectionEntry<'posts'>) =>
  [
    post.data.title,
    post.data.summary,
    post.data.tags?.join(' '),
    post.body,
  ]
    .filter(Boolean)
    .join(' ')
    .replace(/\s+/g, ' ')
    .trim()
    .toLowerCase();
---

<section class="mx-auto max-w-3xl px-6 pb-16">
  <div class="flex flex-col gap-6 sm:flex-row sm:items-end sm:justify-between">
    <div>
      <h2 class="text-2xl font-semibold tracking-tight text-foreground transition-colors">最新文章</h2>
      <p class="mt-1 text-xs text-slate-500 transition-colors dark:text-slate-400">
        共收录 <span data-search-count>{posts.length}</span> 篇文章
      </p>
    </div>
    <a
      class="text-sm text-slate-500 transition-colors hover:text-foreground dark:text-slate-300 dark:hover:text-white"
      href="/feed.xml"
    >
      RSS 订阅
    </a>
  </div>
  <div class="mt-6">
    <label class="block text-sm font-medium text-slate-600 transition-colors dark:text-slate-300" for="post-search-input">搜索文章</label>
    <div class="mt-2">
      <input
        class="w-full rounded-lg border border-slate-200 bg-white/80 px-4 py-2 text-sm text-slate-700 shadow-sm transition-colors focus:border-slate-400 focus:outline-none focus:ring-2 focus:ring-slate-200 dark:border-slate-700 dark:bg-slate-900/60 dark:text-slate-200 dark:focus:border-slate-500 dark:focus:ring-slate-700"
        id="post-search-input"
        name="search"
        type="search"
        placeholder="请输入关键词，筛选文章标题和内容"
        autocomplete="off"
        enterkeyhint="search"
      />
    </div>
  </div>
  <p class="mt-4 hidden text-sm text-slate-500 transition-colors dark:text-slate-400" data-search-empty aria-live="polite">未找到匹配的文章。</p>
  <ul class="mt-8 space-y-8" data-post-list>
    {posts.map((post) => {
      const { data, slug } = post;
      const searchText = makeSearchText(post);
      return (
        <li
          class="group rounded-2xl border border-slate-200/70 bg-card/95 p-6 shadow-card transition duration-300 hover:-translate-y-0.5 hover:border-slate-300 hover:shadow-[0_18px_40px_rgba(15,23,42,0.12)] dark:border-slate-700/70 dark:bg-slate-900/60 dark:shadow-card-dark dark:hover:border-slate-500/70 dark:hover:shadow-[0_24px_48px_rgba(2,6,23,0.65)]"
          data-search-item
          data-search={searchText}
          key={slug}
        >
          <a href={`/blog/${slug}/`} class="no-underline">
            <p class="text-xs uppercase tracking-[0.3em] text-slate-400 transition-colors dark:text-slate-500">{data.tags?.join(' / ')}</p>
            <h3 class="mt-3 text-xl font-semibold text-foreground transition-colors group-hover:text-accent">{data.title}</h3>
            <p class="mt-3 text-sm leading-6 text-slate-600 transition-colors dark:text-slate-300">{data.summary}</p>
            <p class="mt-4 text-xs text-slate-400 transition-colors dark:text-slate-500">{new Date(data.pubDate).toLocaleDateString('zh-CN')}</p>
          </a>
        </li>
      );
    })}
  </ul>
</section>

<script>
  const searchInput = document.getElementById('post-search-input');

  if (searchInput) {
    const postList = document.querySelector('[data-post-list]');
    const emptyMessage = document.querySelector('[data-search-empty]');
    const countEl = document.querySelector('[data-search-count]');

    if (postList) {
      const items = Array.from(postList.querySelectorAll('[data-search-item]'));

      const update = () => {
        const rawQuery = searchInput.value.trim().toLowerCase();
        let visibleCount = 0;

        items.forEach((item) => {
          const text = item.dataset.search || '';
          const matches = rawQuery === '' || text.includes(rawQuery);
          item.hidden = !matches;
          if (matches) {
            visibleCount += 1;
          }
        });

        if (countEl) {
          countEl.textContent = String(visibleCount);
        }

        if (emptyMessage) {
          emptyMessage.classList.toggle('hidden', visibleCount !== 0);
        }
      };

      searchInput.addEventListener('input', update);
      searchInput.addEventListener('search', update);

      update();
    }
  }
</script>
